@using Movies.EntityModels
@using Microsoft.AspNetCore.Identity
@model Movie
@inject UserManager<IdentityUser> UserManager

<h2 class="comments-header" data-movie-id="@Model.MovieId">Comments</h2>
@if (Model.Comments.Any())
{
    @foreach (Comment comment in Model.Comments)
    {
        <div class="comment" data-comment-id="@comment.CommentId">
            <h3>@comment.Title by @((await UserManager.FindByIdAsync(comment.UserId))?.UserName)</h3>
            <p>@comment.Description</p>
        </div>
        @if (comment.UserId == UserManager.GetUserId(User)){
            <a class="btn btn-primary" asp-controller="Comment" asp-action="EditComment" asp-route-id="@comment.CommentId">Edit</a>
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" data-id="@comment.CommentId">Delete</button>
        }
    }
}
else
{
    <p>No comments.</p>
}

@*HTML MODAL FOR DELETION*@
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this comment?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>
@*JAVASCRIPT FOR DELETION*@
<script defer>
    let commentIdToDelete;

    document.querySelectorAll('button[data-bs-toggle="modal"]').forEach(button => {
        button.addEventListener('click', function () {
            commentIdToDelete = this.getAttribute('data-id');
        });
    });

    document.getElementById('confirmDelete').addEventListener('click', function () {
        if (commentIdToDelete) {
            fetch(`/Comment/DeleteComment/${commentIdToDelete}`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (response.ok) {
                    location.reload(); 
                } else {
                    alert('Failed to delete the comment.');
                }
            })
            .catch(error => console.error('Error:', error));
        }
    });
</script>

@* JAVASCRIPT FOR MARKING UNREAD COMMENTS *@
<script defer>
const movieId = document.querySelector('.comments-header').getAttribute('data-movie-id');

const comments = document.querySelectorAll('.comment');

comments.forEach(function(comment) {
    console.log(comment.getAttribute('data-comment-id'));
    fetch(`/Comment/IsCommentSeen?commentId=${comment.getAttribute('data-comment-id')}`)
        .then(response => response.json())
        // Returns 1 if not seen, else 0
        .then(IsSeen => {
            if (IsSeen > 0) {
                comment.style.color = "red";
            }
        });
});

     fetch(`/Comment/MarkCommentsAsRead?movieId=${movieId}`)
	.then(response => response.json())
	.then(readCount => {
			console.info(`${readCount} entries marked as read.`);
	});
</script>
