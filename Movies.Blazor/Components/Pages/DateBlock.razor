@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MoviesDataContext db
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client;
@using Movies.SignalR.Service.Hubs
@inject IHubContext<VoteHub> VoteHubContext
@rendermode InteractiveServer

<div class="date-voting-card">
    <div class="date-info">
        <h4>@ProposedDate.ProposedDate.ToString("dd/MM/yyyy HH:mm")</h4>
        
        <div class="vote-actions">
            @if (currentUserId == null)
            {
                <p>Please log in to vote</p>
            }
            else
            {
                @if (!userHasVoted)
                {
                    <button class="btn btn-success" @onclick="VoteUp">+</button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="VoteDown">-</button>
                }
                <span class="vote-count">@ProposedDate.Votes Votes</span>
            }
        </div>
    </div>
</div>

@code {
      [Parameter]
      public VoteDate ProposedDate { get; set; }

      private string currentUserId;
      private bool userHasVoted = false;


      protected override async Task OnInitializedAsync()
      {
      

	var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
	var user = authState.User;

	currentUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

      }


      private async Task CheckUserVote()
      {
	  using var scopedDb = new MoviesDataContext();
          userHasVoted = await scopedDb.UserVotesDate
	      .AnyAsync(uvd =>
	          uvd.DateId == ProposedDate.VoteDateId &&
		  uvd.UserId == currentUserId &&
		  uvd.HasVoted);
      }

      private async Task VoteUp()
      {
          if (currentUserId == null) return;

	  using var transaction = await db.Database.BeginTransactionAsync();

	  try
	  {
		var existingVote = await db.UserVotesDate
		    .FirstOrDefaultAsync(uvd =>
		        uvd.DateId == ProposedDate.VoteDateId &&
			uvd.UserId == currentUserId);
		if (existingVote is null)
		{
		    existingVote = new UserVoteDate
		    {		 
		        UserId = currentUserId,
			DateId = ProposedDate.VoteDateId,
			HasVoted = true
		    };
		    db.UserVotesDate.Add(existingVote);
		    ProposedDate.Votes++;
		}
		else if (!existingVote.HasVoted)
		{
		    existingVote.HasVoted = true;
		    ProposedDate.Votes++;
		}

		await db.SaveChangesAsync();
		await transaction.CommitAsync();

		userHasVoted = true;


			await VoteHubContext.Clients.All.SendAsync("ReceiveVoteUpdate", ProposedDate.VoteDateId, ProposedDate.Votes);
		StateHasChanged();
	  }
	  catch (Exception ex)
	  {
	      await transaction.RollbackAsync();
	      Console.WriteLine("Error trying to vote");
	  }
      }

      private async Task VoteDown()
      {
          if (currentUserId == null) return;

	  using var transaction = await db.Database.BeginTransactionAsync();

	  try
	  {
		var existingVote = await db.UserVotesDate
		    .FirstOrDefaultAsync(uvd =>
		        uvd.DateId == ProposedDate.VoteDateId &&
			uvd.UserId == currentUserId);

		ProposedDate.Votes = Math.Max(0, ProposedDate.Votes - 1);

		userHasVoted = false;
		db.UserVotesDate.Remove(existingVote);
		await db.SaveChangesAsync();
		await transaction.CommitAsync();

				await VoteHubContext.Clients.All.SendAsync("ReceiveVoteUpdate", ProposedDate.VoteDateId, ProposedDate.Votes);
		StateHasChanged();
	  }
	  catch (Exception ex)
	  {
		await transaction.RollbackAsync();
		Console.WriteLine("Error trying to remove vote");
	  }

      }

}