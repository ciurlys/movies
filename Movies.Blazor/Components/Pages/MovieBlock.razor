@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MoviesDataContext db
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveServer

<div class="date-voting-card">
    <div class="date-info">
        <h4>@UnseenMovie.Title</h4>
        
        <div class="vote-actions">
            @if (currentUserId == null)
            {
                <p>Please log in to vote</p>
            }
            else
            {
                @if (!userHasVoted)
                {
                    <button class="btn btn-success" @onclick="VoteUp">+</button>
                }
                else
                {
                    <button class="btn btn-danger" @onclick="VoteDown">-</button>
                }
                <span class="vote-count">@UnseenMovie.Votes Votes</span>
            }
        </div>
    </div>
</div>

@code {
      [Parameter]
      public Movie UnseenMovie { get; set; }

      private string currentUserId;
      private bool userHasVoted = false;

      protected override async Task OnInitializedAsync()
      {
      var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();		 var user = authState.User;

 currentUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
	  if (currentUserId is not null)
	  {
		await CheckUserVote();
	  }
      }

      private async Task CheckUserVote()
      {
           using var scopedDb = new MoviesDataContext();
	   userHasVoted = await scopedDb.UserVotesMovie
	       .AnyAsync( uvm =>
	           uvm.MovieId == UnseenMovie.MovieId &&
		   uvm.UserId == currentUserId &&
		   uvm.HasVoted);
      }

     private async Task VoteUp()
     {
         if (currentUserId == null) return;

	 using var transaction = await db.Database.BeginTransactionAsync();

	 try
	 {
		var existingVote = await db.UserVotesMovie
		    .FirstOrDefaultAsync(uvm =>
		        uvm.MovieId == UnseenMovie.MovieId &&
			uvm.UserId == currentUserId);
		if (existingVote is null)
		{
			existingVote = new UserVoteMovie
			{
				MovieId = UnseenMovie.MovieId,
				UserId = currentUserId,
				HasVoted = true
			};
			db.UserVotesMovie.Add(existingVote);
			UnseenMovie.Votes++;
		}
		else if (!existingVote.HasVoted)
		{
			existingVote.HasVoted = true;
			UnseenMovie.Votes++;
		}

		await db.SaveChangesAsync();
		await transaction.CommitAsync();

		userHasVoted = true;

		StateHasChanged();
	 }
	 catch (Exception ex)
	 {
		await transaction.RollbackAsync();
		Console.WriteLine("Error trying to vote");
	 }
     }

     private async Task VoteDown()
     {
         if (currentUserId == null) return;

	 using var transaction = await db.Database.BeginTransactionAsync();

	 try
	 {
		var existingVote = await db.UserVotesMovie
		    .FirstOrDefaultAsync(uvm =>
		         uvm.MovieId == UnseenMovie.MovieId &&
			 uvm.UserId == currentUserId);
		UnseenMovie.Votes = Math.Max(0, UnseenMovie.Votes - 1);

		userHasVoted = false;
		db.UserVotesMovie.Remove(existingVote);
		await db.SaveChangesAsync();
		await transaction.CommitAsync();

		StateHasChanged();
	 }
	 catch (Exception ex)
	 {
		await transaction.RollbackAsync();
		Console.WriteLine("Error trying to remove vote");
	 }
     }
}