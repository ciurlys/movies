@page "/add-date"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Movies.SignalR.Service.Hubs
@rendermode InteractiveServer
@inject MoviesDataContext db;
@inject NavigationManager NavigationManager
@inject IHubContext<VoteHub> VoteHubContext
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client;

@attribute [Authorize]


<EditForm OnValidSubmit="AddProposedDate" Model="@newDate" FormName="addDate">
	 <div class="mb-3">
	      <label for="date" class="form-label">Date:</label>
	      <InputDate Type="InputDateType.DateTimeLocal" id="date" @bind-Value:format="dd/MM/yyyy HH:mm" @bind-Value="newDate.ProposedDate" class="form-control" />
	 </div>
	 <button type="submit">Propose Date</button>
</EditForm>

<div>DATE: @newDate.ProposedDate </div>

<h3>Proposed dates for the week @startOfWeek.ToString("dd") - @endOfWeek.ToString("dd")</h3>
<div>
	@if (Dates is not null)
	{
		@foreach(var d in Dates)
		{
			<DateBlock ProposedDate="@d" />
		}
	}
	else
	{
		<div>No dates proposed.</div>
	}
</div>

@code{
	 private HubConnection hubConnection;
	private VoteDate newDate = new();
	private DateTime inputDate = DateTime.Now;

	private List<VoteDate> Dates = new();

	private async Task AddProposedDate()
	{
		if (newDate.ProposedDate > endOfWeek || newDate.ProposedDate < startOfWeek) return;

	        newDate.ProposedDate = newDate.ProposedDate.ToUniversalTime();
		db.Dates.Add(newDate);
		await db.SaveChangesAsync();
		newDate = new();
		Dates = await db.Dates.OrderBy(d => d.ProposedDate).ToListAsync();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
        try
        {
         hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/voteHub"), options =>
    {
        options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
    }).ConfigureLogging(logging =>
    {
        logging.AddConsole();
        logging.SetMinimumLevel(LogLevel.Debug);
    })
    .Build();
            // Add handler for incoming messages
            hubConnection.On<int, int>("ReceiveVoteUpdate", (voteDateId, newVoteCount) =>
            {
                var date = Dates.FirstOrDefault(d => d.VoteDateId == voteDateId);
                if (date != null)
                {
                    date.Votes = newVoteCount;
                    StateHasChanged();
                }
            });

            // Start the connection
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error establishing SignalR connection: {ex.Message}");
        }
	
		Dates = await db.Dates.OrderBy(d => d.ProposedDate).ToListAsync();
	}

	    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

	//TODO: probably move this to a method that starts when the page is loading to avoid the restrictions for field declaration
	
	private DateTime startOfWeek = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek + (int)DayOfWeek.Monday).ToUniversalTime();
	private DateTime endOfWeek = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek + (int)DayOfWeek.Monday).AddDays(6).ToUniversalTime();
}